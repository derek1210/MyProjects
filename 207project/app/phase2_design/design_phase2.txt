DESCRIPTION

•	The HospitalPolicy is an interface which contains information about the hospital’s policy, this information will be stored in an array. For example, it might look something like {2, 39, 140, 90, 100, 50}, where each entry is a critical value for a particular patient attribute (age, temperature, etc.). Furthermore, the interface requires that the abstract method “determine urgency” is overridden for any class that implements it.
•	The VisitRecord class stores information about symptoms and vital signs for a patient on a particular visit. The data structure we plan to use to store the symptoms is a map with keys being the date and time for which a particular symptom was recorded/observed, and values being a text description of the patient’s symptoms. We feel this is appropriate because key-value pairs can be added to the map as needed. Hence there is no need to overwrite old data and this complies with the application specifications to retain information about older symptoms. Furthermore, this will be quite convenient for the user/nurse (simply specify the date and time for which you would like to see the corresponding symptoms). By the same reasoning, we will be storing the patient’s vital signs in a map. In this case, keys will be the date and time for which the vital signs were recorded and values will be another map (which maps systolic blood pressure, diastolic blood pressure, heart rate and temperature to their corresponding values).
•	The PatientRecord class implements the HospitalPolicy interface. The class is quite literally a patient’s record. It stores all recorded data about an individual patient. Patient data recorded by the nurse (such as the name, birthdate, health card number and arrival time) will be stored either as primitive data types or strings. We plan to store all the visits of the patients in a map (with keys being arrival time, and values being visit records). In addition, the class will have a function which will indicate how the patient’s urgency is changing, thus showing how the patient is improving or worsening over time as specified in the application requirements. The class will also record the date and time when the patient was last seen by a doctor. This information will be stored in a string. If the patient has not been seen by a doctor, the string will be empty. The class must also override the “determine urgency” method to calculate the patient’s urgency and return a number (0-4) according to the hospital policy. Finally, the class provides an update status function which can be used by the nurse to update the patient’s visit information (symptoms, vital signs), or to record that a patient has been seen by a doctor. 
•	The PatientQueue class is an abstract class which will store all patients in a collection. We plan to use a priority queue to store the patients. A patient’s “priority” depends on the compare function, which will be overridden by the subclasses of PatientQueue. Also, we will implement functions which will add a patient to the queue or remove a patient from the queue so that we do not need to access the queue directly from another class (information hiding).
•	The PatientArrivalQueue is a subclass of PatientQueue, which determines a patient’s “priority” by arrival time. The compare function of the class will provide precise details on how to compare two patients, thus setting up the appropriate priority queue. Add and remove functions will be inherited directly from the superclass.
•	The PatientUrgencyQueue is also a subclass of PatientQueue, which determines a patient’s “priority” by urgency rather than arrival time.
•	The TriageApplication is the focal point of our android application. Here we will store patients who have not been seen by a doctor ordered both by arrival time and by urgency so that nurses can access both queues. It is from these queues that the nurse will have access to all the patient information. In addition, a search can be performed to pull up a patient’s record by specifying said person’s health card number. The class will automatically launch any saved data on runtime, and make an empty instance of the above queues if no data exists. Also, a save function will exist which will write the records of all patients to a text file with each line corresponding to a single patient (Each line will have the format: a,b,c where a is the health card number of the patient, b is the full name of the patient (first last) and c is the date of birth in format yyyy-mm-dd).


Needless to say, we will include the appropiate getter/setter methods for each class in order to encapsulate our code. We did not mention all of this above for the sake of conciseness.