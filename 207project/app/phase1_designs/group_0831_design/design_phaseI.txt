DESCRIPTION

•	The Symptoms class will provide storage of symptomatic information and provide a function to update that information. The data structure we plan to use is a map with keys being the date and time for which a particular symptom was recorded/observed. We feel this is appropriate because key-value pairs can be added to the map as needed. Hence there is no need to overwrite old data and this complies with the application specifications to retain information about older symptoms. Furthermore, this will be quite convenient for the user/nurse (simply specify the date and time for which you would like to see the corresponding symptoms). 
•	The VitalSigns class is similar to the Symptoms class in that it will store information about a patient's vital signs in a map. In this case, keys will be the date and time and the values of the map will be another map (which maps systolic blood pressure, diastolic blood pressure, heart rate, and temperature to their corresponding values).
•	The PatientRecord class is quite literally a patient’s record. It stores all recorded data about an individual patient. Patient data recorded by the nurse (such as the name, birthdate, health card number and arrival time) will be stored as strings. On the other hand, we plan to store a patient’s symptoms and vital signs using other classes which operate independently (as explained above). The PatientRecord class will also record the date and time when the patient was last seen by a doctor. This information will be stored in a string. If the patient has not been seen by a doctor, the string will be empty. The class will also have a function to calculate the patient’s urgency and return a number (0-4) according to the hospital policy. In addition, the class will have a data structure which will indicate how the patient’s urgency is changing as a function of time, thus showing how the patient is improving or worsening over time as specified in the application requirements. Again, we plan to achieve this using a map. Finally, the class provides an update status function which can be used by the nurse to update the patient’s symptoms, vital signs, or to record that a patient has been seen by a doctor. 
•	The PatientQueue class is an abstract class which will store all patients in a collection. We plan to use a priority queue to store the patients. A patient’s “priority” depends on the compare function, which will be overridden by the subclasses of PatientQueue. Also, a re-categorize function will be necessary as a patient’s health status is variable, and thus we need to ensure that the patients are in the correct order at any given time.
•	The PatientArrivalQueue is a subclass of PatientQueue, which determines a patient’s “priority” by arrival time. The compare function of the class will provide precise details on how to compare two patients, thus setting up the appropriate queue. 
•	The PatientUrgencyQueue is also a subclass of PatientQueue, which determines a patient’s “priority” by urgency rather than arrival time. In addition, this class will be able to display subqueues of the main queue so that only patients categorized as urgent, less urgent, or non-urgent are displayed (or a combination of the three). By default, all three subqueues will be displayed in decreasing order of urgency.
•	The TriageApplication is the focal point of our android application. Here we will store both queues of patients (mentioned above) who have not been seen by a doctor. It is from here that the nurses will have access (they will not actually have access to the back end, but they will have indirect access, of course) to all the necessary information they need. The nurses can access both queues and therefore these queues will provide access to all the patient information. In addition, the TriageApplication will provide a search function which can be used to pull up a patient’s record by specifying said person’s health card number. The class will automatically launch any saved data on runtime, and make an empty instance of the above queues if no data exists. Also, a save function will exist which will write both queues of patients to a binary file. We plan to accomplish this using the serialization procedure.
•	Needless to say, all of our classes will have appropriate getter/setter methods (in order to encapsulate our code) which we have not discussed for the sake of conciseness. The nurses will use these methods (again, indirectly via the front end which we will design in later phases) to access any information they need and update it accordingly, as specified by the application requirements.